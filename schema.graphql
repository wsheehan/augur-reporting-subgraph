# Events - MarketCreated, MarketFinalized, TradingProceedsClaimed

type Market @entity {
    # event MarketCreated 
    id: ID! # address market
    topic: Bytes!
    description: String
    extraInfo: String 

    marketCreator: User!
    outcomes: [Bytes!]! 
    marketCreationFee: BigInt
    marketType: String!

    # timing
    createdAt: BigInt
    endTime: BigInt

    # fee structure
    marketCreatorFee: BigInt
    reportersFee: BigInt
    validityBondETH: BigInt
    feeWindow: FeeWindow

    # event MarketFinalized
    status: String
    finalized: Boolean 
    payoutNumerators: [BigInt!]
    invalid: Boolean
    rounds: BigInt

    # disputeCrowdsourcer
    disputes: [Dispute!]! @derivedFrom(field: "market")
    initialReport: InitialReport @derivedFrom(field: "market")
    totalDisputed: BigInt!

    # TODO
    openInterest: BigInt
    feesGenerated: BigInt
}

# Events - InitialReportSubmitted, InitialReporterRedeemed, InitialReporterTransferred
type InitialReport @entity {
    # event InitialReportSubmitted
    id: ID! # address market
    market: Market!
    amountStaked: BigInt!
    isDesignatedReporter: Boolean # false null bug, no !
    payoutNumerators: [BigInt!]!
    invalid: Boolean
    reporter: User!

    # time
    timestamp: BigInt!

    #event InitialReporterRedeemed 
    amountRedeemed: BigInt
    repReceived: BigInt
    reportingFeesReceived: BigInt
}

# Events - DisputeCrowdsourcerCompleted, DisputeCrowdsourcerContribution, DisputeCrowdsourcerCreated, DisputeCrowdSourcerRedeemed
type Dispute @entity {
    # event DisputeCrowdsourcerCreated
    id: ID!
    payoutNumerators: [BigInt!]!
    size: BigInt
    sizeFilled: BigInt
    invalid: Boolean
    participant: Bytes
    market: Market!

    # event DisputeCrowdsourcerContribution
    token: Token! @derivedFrom(field: "dispute")

    # event DisputeCrowdsourcerCompleted
    completed: Boolean # this gets triggered true when event Completed is done 
    completedBlock: BigInt
    completedTimestamp: BigInt

    # fee window
    feeWindow: FeeWindow!

    # event DisputeCrowdsourcedRedeemed
    amountRedeemed: BigInt #event Redeemed
    repReceived: BigInt #event Redeemed
    reportingFeesReceived: BigInt
}

# instantiated by TokenMinted
# event TokenMinted, TokenBurned, TokenTransferred
type Token @entity {
    id: ID! # token Address
    dispute: Dispute
    universe: Bytes!
    market: Bytes!
    tokenType: String! # derived from enum
    owners: [TokenOwner!]! @derivedFrom(field: "tokenAddress")
}

type TokenOwner @entity {
    id: ID! # concatenation of token address and owner
    tokenAddress: Token!
    tokenOwner: User! # needed to reference back to user
    amount: BigInt!
}

type FeeWindow @entity {
    id: ID!
    startTime: BigInt!
    endTime: BigInt!
    address: Bytes!
    disputes: [Dispute!] @derivedFrom(field: "feeWindow")
}

type User @entity {
    id: ID! # user account
    markets: [Market!] @derivedFrom(field: "marketCreator")
    marketsCreated: BigInt!
    initialReports: [InitialReport!]! @derivedFrom(field: "reporter")
    tokensOwned: [TokenOwner!]! @derivedFrom(field: "tokenOwner")
}



